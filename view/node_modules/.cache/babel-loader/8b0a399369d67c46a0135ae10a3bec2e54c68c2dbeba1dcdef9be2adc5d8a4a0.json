{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\OneDrive\\\\Desktop\\\\web developer\\\\epicode\\\\esercizi\\\\capstone_Andrea_Frabotta\\\\view\\\\src\\\\components\\\\professionalPage\\\\ProfessionalContent.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { AddWorkModal } from \"../addWorkModal/AddWorkModal\";\n// import { useState, useEffect } from \"react\";\n// import { CustomSpinner } from \"../loading/Loader\";\n// import { ErrorAlert } from \"../error/Error\";\n// import { UserCards } from \"../card/UserCard\"\n\n// export const ProfessionalContent = () => {\n\n//     const [isLoading, setIsLoading] = useState(false)\n//     const [error, setError] = useState('')\n//     const [works,setWorks] = useState([])\n\n//     const getWorks = async () => {\n//         setIsLoading(true)\n//         try {\n//             const response = await fetch('http://localhost:4040/works', {\n//                 method: 'GET',\n//                 headers: {\n//                     \"Content-type\": 'application/json',\n//                     \"authorization\": \"\"\n//                 }\n//             })\n//             if(response.ok){\n//                 const data = await response.json()\n//                 setWorks(data)\n//                 console.log(works)\n//             }else{\n//                 throw new Error(\"Somethinks wrong!\")\n//             }\n//         } catch (e) {\n//             setError(e.message)\n//         } finally {\n//             setIsLoading(false)\n//         }\n//     }\n\n//     useEffect(() => {\n//             getWorks()\n//             console.log( works)\n//     }, [])\n\n//     return (\n//         <>\n//       <AddWorkModal></AddWorkModal>\n//         <div className=\"container pt-5 pb-5\">\n//             <div className=\"row\">\n//                 {isLoading && <CustomSpinner />}\n//                 {!isLoading && error && (\n//                     <ErrorAlert\n//                         message=\"Oops! Qualcosa è andato storto durante il caricamento dei dati\"\n//                     />\n//                 )}\n//                 {!isLoading && !error && (\n//                   works.works && works.works.map((work) => (\n//                         <div key={work._id} className=\"col-12 col-md-6 col-lg-4 col-xl-3 mb-3\">\n//                             <UserCards\n//                                 title={work.title}\n//                                 description={work.description}\n//                                 img={work.img}\n//                                 author={work.author}\n\n//                             />\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n//         </div>\n//         </>\n//     );\n// }\nimport React, { useState, useEffect } from \"react\";\nimport { AddWorkModal } from \"../addWorkModal/AddWorkModal\";\nimport { CustomSpinner } from \"../loading/Loader\";\nimport { ErrorAlert } from \"../error/Error\";\nimport { UserCards } from \"../card/UserCard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProfessionalContent = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [works, setWorks] = useState([]);\n  const getWorks = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_BASE_URL}/works`, {\n        method: \"GET\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          authorization: \"\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n      setWorks(data);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    getWorks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddWorkModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container pt-5 pb-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [isLoading && /*#__PURE__*/_jsxDEV(CustomSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n          message: \"Ops! qualcosa \\xE8 andato storto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 36\n        }, this), works.length > 0 ? works.map(work => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 col-md-6 col-lg-4 col-xl-3 mb-3\",\n          children: /*#__PURE__*/_jsxDEV(UserCards, {\n            author: work.author,\n            description: work.description,\n            title: work.title,\n            img: work.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)\n        }, work._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading works...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this) // Aggiunta gestione del caricamento\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ProfessionalContent, \"Skv1WPkajaaRnlkMFVMmM84fLwc=\");\n_c = ProfessionalContent;\nvar _c;\n$RefreshReg$(_c, \"ProfessionalContent\");","map":{"version":3,"names":["React","useState","useEffect","AddWorkModal","CustomSpinner","ErrorAlert","UserCards","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfessionalContent","_s","isLoading","setIsLoading","error","setError","works","setWorks","getWorks","response","fetch","process","env","REACT_APP_SERVER_BASE_URL","method","headers","authorization","ok","Error","data","json","e","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","work","author","description","title","img","_id","_c","$RefreshReg$"],"sources":["C:/Users/andre/OneDrive/Desktop/web developer/epicode/esercizi/capstone_Andrea_Frabotta/view/src/components/professionalPage/ProfessionalContent.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import { AddWorkModal } from \"../addWorkModal/AddWorkModal\";\r\n// import { useState, useEffect } from \"react\";\r\n// import { CustomSpinner } from \"../loading/Loader\";\r\n// import { ErrorAlert } from \"../error/Error\";\r\n// import { UserCards } from \"../card/UserCard\"\r\n\r\n\r\n// export const ProfessionalContent = () => {\r\n\r\n\r\n//     const [isLoading, setIsLoading] = useState(false)\r\n//     const [error, setError] = useState('')\r\n//     const [works,setWorks] = useState([])\r\n\r\n//     const getWorks = async () => {\r\n//         setIsLoading(true)\r\n//         try {\r\n//             const response = await fetch('http://localhost:4040/works', {\r\n//                 method: 'GET',\r\n//                 headers: {\r\n//                     \"Content-type\": 'application/json',\r\n//                     \"authorization\": \"\"\r\n//                 }\r\n//             })\r\n//             if(response.ok){\r\n//                 const data = await response.json()\r\n//                 setWorks(data)\r\n//                 console.log(works)\r\n//             }else{\r\n//                 throw new Error(\"Somethinks wrong!\")\r\n//             }\r\n//         } catch (e) {\r\n//             setError(e.message)\r\n//         } finally {\r\n//             setIsLoading(false)\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//             getWorks()\r\n//             console.log( works)\r\n//     }, [])\r\n\r\n//     return (\r\n//         <>\r\n//       <AddWorkModal></AddWorkModal>\r\n//         <div className=\"container pt-5 pb-5\">\r\n//             <div className=\"row\">\r\n//                 {isLoading && <CustomSpinner />}\r\n//                 {!isLoading && error && (\r\n//                     <ErrorAlert\r\n//                         message=\"Oops! Qualcosa è andato storto durante il caricamento dei dati\"\r\n//                     />\r\n//                 )}\r\n//                 {!isLoading && !error && (\r\n//                   works.works && works.works.map((work) => (\r\n//                         <div key={work._id} className=\"col-12 col-md-6 col-lg-4 col-xl-3 mb-3\">\r\n//                             <UserCards\r\n//                                 title={work.title}\r\n//                                 description={work.description}\r\n//                                 img={work.img}\r\n//                                 author={work.author}\r\n                                \r\n//                             />\r\n//                         </div>\r\n//                     ))\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//         </>\r\n//     );\r\n// }\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { AddWorkModal } from \"../addWorkModal/AddWorkModal\";\r\nimport { CustomSpinner } from \"../loading/Loader\";\r\nimport { ErrorAlert } from \"../error/Error\";\r\nimport { UserCards } from \"../card/UserCard\";\r\n\r\nexport const ProfessionalContent = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [works, setWorks] = useState([]);\r\n\r\n  const getWorks = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_SERVER_BASE_URL}/works`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          authorization: \"\",\r\n        },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      const data = await response.json();\r\n      setWorks(data);\r\n    } catch (e) {\r\n      setError(e.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWorks();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AddWorkModal />\r\n      <div className=\"container pt-5 pb-5\">\r\n        <div className=\"row\">\r\n          {isLoading && <CustomSpinner />}\r\n          {!isLoading && error && (<ErrorAlert message=\"Ops! qualcosa è andato storto\"/>)}\r\n              {works.length > 0 ? (\r\n                works.map((work) => (\r\n                  <div key={work._id} className=\"col-12 col-md-6 col-lg-4 col-xl-3 mb-3\">\r\n                    <UserCards\r\n                      author={work.author}\r\n                      description={work.description}\r\n                      title={work.title}\r\n                      img={work.img}\r\n                    />\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>Loading works...</p> // Aggiunta gestione del caricamento\r\n              )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMkB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BL,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,yBAA0B,QAAO,EAAE;QAC7EC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE;QACjB;MACF,CAAC,CAAC;MACF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCb,QAAQ,CAACY,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOE,CAAC,EAAE;MACVhB,QAAQ,CAACgB,CAAC,CAACC,OAAO,CAAC;IACrB,CAAC,SAAS;MACRnB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACE1B,OAAA,CAACL,YAAY;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChB9B,OAAA;MAAK+B,SAAS,EAAC,qBAAqB;MAAAL,QAAA,eAClC1B,OAAA;QAAK+B,SAAS,EAAC,KAAK;QAAAL,QAAA,GACjBrB,SAAS,iBAAIL,OAAA,CAACJ,aAAa;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC9B,CAACzB,SAAS,IAAIE,KAAK,iBAAKP,OAAA,CAACH,UAAU;UAAC4B,OAAO,EAAC;QAA+B;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAE,EAC1ErB,KAAK,CAACuB,MAAM,GAAG,CAAC,GACfvB,KAAK,CAACwB,GAAG,CAAEC,IAAI,iBACblC,OAAA;UAAoB+B,SAAS,EAAC,wCAAwC;UAAAL,QAAA,eACpE1B,OAAA,CAACF,SAAS;YACRqC,MAAM,EAAED,IAAI,CAACC,MAAO;YACpBC,WAAW,EAAEF,IAAI,CAACE,WAAY;YAC9BC,KAAK,EAAEH,IAAI,CAACG,KAAM;YAClBC,GAAG,EAAEJ,IAAI,CAACI;UAAI;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC,GANMI,IAAI,CAACK,GAAG;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOb,CACN,CAAC,gBAEF9B,OAAA;UAAA0B,QAAA,EAAG;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,CAAC;QACzB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAAC1B,EAAA,CAxDWD,mBAAmB;AAAAqC,EAAA,GAAnBrC,mBAAmB;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}